// Generated by CoffeeScript 1.9.1
var decoder, hex, pow2;

decoder = new textEncoding.TextDecoder('utf-8');

pow2 = function(n) {
  if (n >= 0 && n < 31) {
    return 1 << n;
  } else {
    return pow2[n] || (pow2[n] = Math.pow(2, n));
  }
};

hex = function(b) {
  var res;
  res = b.toString(16);
  if (res.length === 1) {
    res = "0" + res;
  }
  return res;
};

module.exports = {
  byte: function(b, i) {
    if (i == null) {
      i = 0;
    }
    return b[i];
  },
  char: function(b, i) {
    if (i == null) {
      i = 0;
    }
    return String.fromCharCode(b[i]);
  },
  short: function(b, i) {
    if (i == null) {
      i = 0;
    }
    return b[i] << 8 | b[i + 1];
  },
  int: function(b, i) {
    if (i == null) {
      i = 0;
    }
    return b[i] << 24 | b[i + 1] << 16 | b[i + 2] << 8 | b[i + 3];
  },
  bigint: function(b, i) {
    var j, k, res;
    if (i == null) {
      i = 0;
    }
    res = '';
    for (j = k = 0; k < 8; j = ++k) {
      res += hex(b[i + j]);
    }
    return parseFloat(res);
  },
  float: function(b, i) {
    var exponent, mantissa, sign;
    if (i == null) {
      i = 0;
    }
    sign = 1 - 2 * (b[i] >> 7);
    exponent = (b[i] << 1 & 0xff | b[i + 1] >> 7) - 127;
    mantissa = (b[i + 1] & 0x7f) << 16 | b[i + 2] << 8 | b[i + 3];
    if (exponent === 128) {
      if (mantissa !== 0) {
        return NaN;
      } else {
        return sign * Infinity;
      }
    }
    if (exponent === -127) {
      return sign * mantissa * pow2(-126 - 23);
    }
    return sign * (1 + mantissa * pow2(-23)) * pow2(exponent);
  },
  double: function(b, i) {
    var exponent, mantissa, sign;
    if (i == null) {
      i = 0;
    }
    sign = 1 - 2 * (b[i] >> 7);
    exponent = ((b[i] << 1 & 0xff) << 3 | b[i + 1] >> 4) - ((1 << 10) - 1);
    mantissa = (b[i + 1] & 0x0f) * pow2(48) + b[i + 2] * pow2(40) + b[i + 3] * pow2(32) + b[i + 4] * pow2(24) + b[i + 5] * pow2(16) + b[i + 6] * pow2(8) + b[i + 7];
    if (exponent === 1024) {
      if (mantissa !== 0) {
        return NaN;
      } else {
        return sign * Infinity;
      }
    }
    if (exponent === -1023) {
      return sign * mantissa * pow2(-1022 - 52);
    }
    return sign * (1 + mantissa * pow2(-52)) * pow2(exponent);
  },
  string: function(b) {
    return decoder.decode(b);
  }
};
