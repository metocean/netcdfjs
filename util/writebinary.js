// Generated by CoffeeScript 1.9.1
var decoder, pow2, writeFloat;

decoder = new textEncoding.TextDecoder('utf-8');

pow2 = function(n) {
  if (n >= 0 && n < 31) {
    return 1 << n;
  } else {
    return pow2[n] || (pow2[n] = Math.pow(2, n));
  }
};

writeFloat = function(value, mantSize, expSize) {
  var b, eMax, eMin, exponent, mantissa, signBit;
  signBit = value < 0 ? 1 : 0;
  exponent = void 0;
  mantissa = void 0;
  eMax = ~(-1 << expSize - 1);
  eMin = 1 - eMax;
  if (value < 0) {
    value = -value;
  }
  if (value === 0) {
    exponent = 0;
    mantissa = 0;
  } else if (isNaN(value)) {
    exponent = 2 * eMax + 1;
    mantissa = 1;
  } else if (value === Infinity) {
    exponent = 2 * eMax + 1;
    mantissa = 0;
  } else {
    exponent = Math.floor(Math.log(value) / Math.LN2);
    if (exponent >= eMin && exponent <= eMax) {
      mantissa = Math.floor((value * pow2(-exponent) - 1) * pow2(mantSize));
      exponent += eMax;
    } else {
      mantissa = Math.floor(value / pow2(eMin - mantSize));
      exponent = 0;
    }
  }
  b = [];
  while (mantSize >= 8) {
    b.push(mantissa % 256);
    mantissa = Math.floor(mantissa / 256);
    mantSize -= 8;
  }
  exponent = exponent << mantSize | mantissa;
  expSize += mantSize;
  while (expSize >= 8) {
    b.push(exponent & 0xff);
    exponent >>>= 8;
    expSize -= 8;
  }
  b.push(signBit << expSize | exponent);
  return b;
};

module.exports = {
  float: function(value) {
    return writeFloat(value, 23, 8);
  },
  double: function(value) {
    return writeFloat(value, 52, 11);
  }
};
